#pragma kernel Initialize
#pragma kernel UpdateX
#pragma kernel UpdateY
#pragma kernel UpdateZ

#define NUMBER_OF_ELEMENTS 2
#define ADDRESS(x,y,z,size) x + y * size + z * size * size

struct Cell
{
	int volume;
	int content[NUMBER_OF_ELEMENTS];
};

static int Viscosities[] =
{
	0, 0, 0, 0, 0, 0, 0, 0
};

static int Densities[] =
{
	0, 1, 2, 3, 4, 5, 6, 7
};

StructuredBuffer<Cell> currentGeneration;
RWStructuredBuffer<Cell> newGeneration;

uint size;
int maxVolume;
int3 offset;

[numthreads(8, 8, 8)]
void Initialize(uint3 id : SV_DispatchThreadID)
{	
	for (int i = 0; i < NUMBER_OF_ELEMENTS; ++i)
	{
		newGeneration[ADDRESS(id.x, id.y, id.z, size)].content[i] = 0;
	}

	newGeneration[ADDRESS(id.x, id.y, id.z, size)].volume = 0;

	if (id.x == 0 || id.y == 0 || id.z == 0 || id.x == size - 1 || id.y == size - 1 || id.z == size - 1)
	{
		newGeneration[ADDRESS(id.x, id.y, id.z, size)].volume = -1;
	}
}

[numthreads(4, 8, 8)]
void UpdateX(uint3 id : SV_DispatchThreadID)
{
	newGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)] = currentGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)];
	newGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)] = currentGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)];

	if (newGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].volume == -1 || newGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].volume == -1)
	{
		return;
	}

	newGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].volume = 0;
	newGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].volume = 0;

	int mean, difference, amount;

	[unroll(NUMBER_OF_ELEMENTS)]
	for (int i = NUMBER_OF_ELEMENTS - 1; i >= 0; --i)
	{
		mean = (currentGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].content[i] + currentGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].content[i]) / 2;

		difference = mean - currentGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].content[i];

		difference *= 1 - (mean == currentGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].content[i] || mean == currentGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].content[i]);

		amount = sign(difference) * max(abs(difference) - Viscosities[i], 0);

		if ((newGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].volume + currentGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].content[i] + amount) > maxVolume)
		{
			amount -= (newGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].volume + currentGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].content[i] + amount - maxVolume);
		}

		if ((newGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].volume + currentGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].content[i] - amount) > maxVolume)
		{
			amount += (newGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].volume + currentGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].content[i] - amount - maxVolume);
		}

		newGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].content[i] = currentGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].content[i] + amount;
		newGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].volume += currentGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].content[i] + amount;

		newGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].content[i] = currentGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].content[i] - amount;
		newGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].volume += currentGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].content[i] - amount;
	}

	if (id.x * 2 + offset.x == 8 && id.y == 8 && id.z == 8)
	{
		//newGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].content[0] += 1;
		//newGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].volume += 1;
		newGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].content[1] += 1;
		newGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].volume += 1;
	}
}

[numthreads(8, 4, 8)]
void UpdateY(uint3 id : SV_DispatchThreadID)
{
	newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)] = currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)];
	newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)] = currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)];

	if (newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].volume == -1 || newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].volume == -1)
	{
		return;
	}

	newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].volume = 0;
	newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].volume = 0;

	int amount, bottom;

	[unroll(NUMBER_OF_ELEMENTS)]
	for (int i = 0; i < NUMBER_OF_ELEMENTS; ++i)
	{
		//sum of bottom and top elenemt[id] amount
		amount = (currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].content[i] + currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].content[i]);
		//min of available space in bottom cell or content amount
		bottom = (int)min(maxVolume - newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].volume, min(Densities[i], 1) * amount);

		newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].content[i] = bottom;
		newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].volume += bottom;

		newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].content[i] = amount - bottom;
		newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].volume += amount - bottom;
	}

	if (id.x == 8 && id.y * 2 + offset.y == 8 && id.z == 8)
	{
		//newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].content[0] += 1;
		//newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].volume += 1;
		newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].content[1] += 1;
		newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].volume += 1;
	}
}

[numthreads(8, 8, 4)]
void UpdateZ(uint3 id : SV_DispatchThreadID)
{
	newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)] = currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)];
	newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)] = currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)];

	if (newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].volume == -1 || newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].volume == -1)
	{
		return;
	}

	newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].volume = 0;
	newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].volume = 0;

	int mean, difference, amount;

	[unroll(NUMBER_OF_ELEMENTS)]
	for (int i = NUMBER_OF_ELEMENTS - 1; i >= 0; --i)
	{
		mean = (currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].content[i] + currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].content[i]) / 2;
		
		difference = mean - currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].content[i];
		
		difference *= 1 - (mean == currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].content[i] || mean == currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].content[i]);

		amount = sign(difference) * max(abs(difference) - Viscosities[i], 0);
		
		if ((newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].volume + currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].content[i] + amount) > maxVolume)
		{
			amount -= (newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].volume + currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].content[i] + amount - maxVolume);
		}

		if ((newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].volume + currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].content[i] - amount) > maxVolume)
		{
			amount += (newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].volume + currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].content[i] - amount - maxVolume);
		}

		newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].content[i] = currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].content[i] + amount;
		newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].volume += currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].content[i] + amount;

		newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].content[i] = currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].content[i] - amount;
		newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].volume += currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].content[i] - amount;
	}

	if (id.x == 8 && id.y == 8 && 8 == id.z * 2 + offset.z)
	{
		//newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].content[0] += 1;
		//newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].volume += 1;
		newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].content[1] += 1;
		newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].volume += 1;
	}
}

