#pragma kernel Initialize
#pragma kernel SetObstacle
#pragma kernel UpdateX
#pragma kernel UpdateY
#pragma kernel UpdateZ

#define MIN_TEMPERATURE -275
#define MAX_TEMPERATURE 1000000

#define NUMBER_OF_ELEMENTS 3
#define ADDRESS(x,y,z,size) x + y * size + z * size * size

struct Cell
{
	float content[NUMBER_OF_ELEMENTS];
	float volume;
	float temperature;
};

static float Viscosities[] =
{
	0, 0.1, 0.9
};

static float Densities[] =
{
	0.4, 1, 2
};

static float2 AggregationChangeTemperatures[] =
{
	float2(MAX_TEMPERATURE, 10),
	float2(MAX_TEMPERATURE, MIN_TEMPERATURE),
	float2(100, MIN_TEMPERATURE)
};

static int2 AggregationChangeElements[] =
{
	int2(-1, 2),
	int2(-1, -1),
	int2(0, -1)
};

static float temperatureSpread = 32;

StructuredBuffer<Cell> currentGeneration;
RWStructuredBuffer<Cell> newGeneration;

uint size;
uint3 offset;

uint4 fill;
uint4 heat;

uint3 obstacleStart;
uint3 obstacleEnd;

[numthreads(16, 8, 8)]
void Initialize(uint3 id : SV_DispatchThreadID)
{
	newGeneration[ADDRESS(id.x, id.y, id.z, size)].temperature = 20;
	newGeneration[ADDRESS(id.x, id.y, id.z, size)].volume = -(id.x == 0 || id.y == 0 || id.z == 0 || id.x == size - 1 || id.y == size - 1 || id.z == size - 1 );

	for (uint i = 0; i < NUMBER_OF_ELEMENTS; ++i)
	{
		newGeneration[ADDRESS(id.x, id.y, id.z, size)].content[i] = 0.0;
	}
}

[numthreads(16, 8, 8)]
void SetObstacle(uint3 id : SV_DispatchThreadID)
{
	newGeneration[ADDRESS(id.x, id.y, id.z, size)].volume = -(id.x >= obstacleStart.x && id.x <= obstacleEnd.x && id.y >= obstacleStart.y && id.y <= obstacleEnd.y && id.z >= obstacleStart.z && id.z <= obstacleEnd.z );
}

[numthreads(8, 16, 8)]
void UpdateX(uint3 id : SV_DispatchThreadID)
{
	newGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)] = currentGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)];
	newGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)] = currentGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)];

	if (currentGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].volume < 0 ||
		currentGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].volume < 0 ||
		(abs(currentGeneration[ADDRESS((id.x * 2 + offset.x), (id.y - 1), id.z, size)].volume) < 0.5 &&
		abs(currentGeneration[ADDRESS((id.x * 2 + offset.x + 1), (id.y - 1), id.z, size)].volume) < 0.5))
	{
		return;
	}

	float mean, difference;
	float2 temperature = float2(currentGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].temperature, currentGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].temperature);
	float2 volume = float2(0, 0);

	float content1[NUMBER_OF_ELEMENTS] = currentGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].content;
	float content2[NUMBER_OF_ELEMENTS] = currentGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].content;

	[unroll(NUMBER_OF_ELEMENTS)]
	for (uint i = NUMBER_OF_ELEMENTS - 1; i >= 0; --i)
	{
		mean = (content1[i] + content2[i]) / 2.0;

		difference = (mean - content1[i]) * Viscosities[i];

		difference *= (abs(difference) > 0.01);

		difference -= ((volume.x + content1[i] + difference) > 1) * (volume.x + content1[i] + difference - 1);

		difference += ((volume.y + content2[i] - difference) > 1) * (volume.y + content2[i] - difference - 1);

		if (difference > 0)
		{
			float sumWeightedTemps = temperature.x * currentGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].volume + currentGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].temperature * difference;
			temperature.x = sumWeightedTemps / (currentGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].volume + difference);
		}
		else if (difference < 0)
		{
			float sumWeightedTemps = temperature.y * volume.x - temperature.x * difference;
			temperature.y = sumWeightedTemps / (volume.y - difference);
		}
		else if (abs(difference) < 0.001)
		{
			float diff = (temperature.x - temperature.y) / temperatureSpread;
			temperature += float2(-(diff / (volume.x + 1)), diff / (volume.y + 1));
		}

		content1[i] += difference;
		content2[i] -= difference;

		volume += float2(content1[i], content2[i]);
	}

	newGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].volume = volume.x;
	newGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].volume = volume.y;

	newGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].temperature = temperature.x;
	newGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].temperature = temperature.y;

	newGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].content = content1;
	newGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].content = content2;

	if (id.x * 2 + offset.x == heat.x && id.y == heat.y && id.z == heat.z)
	{
		newGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].temperature = heat.w;
	}
}

[numthreads(16, 8, 8)]
void UpdateY(uint3 id : SV_DispatchThreadID)
{
	newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)] = currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)];
	newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)] = currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)];

	if (currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].volume < 0 ||
		currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].volume < 0)
	{
		return;
	}

	float amount, bottom, difference,
		vol = 0;

	float2 temperature = float2(currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].temperature, currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].temperature);
	float2 volume = float2(currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].volume, currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].volume);

	float content1[NUMBER_OF_ELEMENTS] = currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].content;
	float content2[NUMBER_OF_ELEMENTS] = currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].content;

	[unroll(NUMBER_OF_ELEMENTS)]
	for (uint i = NUMBER_OF_ELEMENTS - 1; i >= 0; --i)
	{
		amount = (content1[i] + content2[i]);
		bottom = min(1.0 - vol, min(Densities[i], 1.0) * amount);

		difference = bottom - content1[i];

		if (amount < 0.01)
		{
			difference = 0.00;
			bottom = 0.00;
			amount = 0.00;
		}

		if (difference > 0)
		{
			float sumWeightedTemps = temperature.x * currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].volume + currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].temperature * difference;
			temperature.x = sumWeightedTemps / (currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].volume + difference);
		}

		content1[i] += difference;
		volume.x += difference;

		vol += bottom;

		difference = amount - bottom - currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].content[i];

		if (difference < 0)
		{
			float sumWeightedTemps = temperature.y * currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].volume + currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].temperature * difference;
			temperature.y = sumWeightedTemps / (currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].volume + difference);
		}

		content2[i] += difference;
		volume.y += difference;

		float tempDifference = (temperature.y - temperature.x) / temperatureSpread;
		temperature += float2(-(tempDifference / (volume.x + 1)), tempDifference / (volume.y + 1));
	}

	newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].volume = volume.x;
	newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].volume = volume.y;

	newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].temperature = temperature.x;
	newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].temperature = temperature.y;

	newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].content = content1;
	newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].content = content2;

	[unroll(NUMBER_OF_ELEMENTS)]
	for (i = NUMBER_OF_ELEMENTS - 1; i >= 0; --i)
	{
		if (newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].content[i] > 0.2)
		{
			if (currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].temperature >= AggregationChangeTemperatures[i].x)
			{
				newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].temperature -= 2;
				newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].content[i] -= 0.2;
				newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].content[AggregationChangeElements[i].x] += 0.2;
			}
			if (currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].temperature < AggregationChangeTemperatures[i].y)
			{
				newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].temperature += 2;
				newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].content[i] -= 0.2;
				newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].content[AggregationChangeElements[i].y] += 0.2;
			}
		}
	}

	if (id.x == fill.x && id.y * 2 + offset.y == fill.y && id.z == fill.z && newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].volume < 0.8)
	{
		newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].content[fill.w] += 0.2;
		newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].volume += 0.2;
	}

	if (id.x == fill.x && id.y * 2 + offset.y + 1 == fill.y && id.z == fill.z && newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].volume < 0.8)
	{
		newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].content[fill.w] += 0.2;
		newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].volume += 0.2;
	}

	if (id.x == heat.x && id.y * 2 + offset.y == heat.y && id.z == heat.z)
	{
		newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].temperature = heat.w;
	}
}

[numthreads(16, 16, 4)]
void UpdateZ(uint3 id : SV_DispatchThreadID)
{
	newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)] = currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)];
	newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)] = currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)];

	if (currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].volume < 0 ||
		currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].volume < 0 ||
		(abs(currentGeneration[ADDRESS(id.x, (id.y - 1), (id.z * 2 + offset.z), size)].volume) < 0.5 &&
		abs(currentGeneration[ADDRESS(id.x, (id.y - 1), (id.z * 2 + offset.z + 1), size)].volume) < 0.5))
	{
		return;
	}

	float mean, difference;
	float2 volume = float2(0, 0);
	float2 temperature = float2(currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].temperature, currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].temperature);

	float content1[NUMBER_OF_ELEMENTS] = currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].content;
	float content2[NUMBER_OF_ELEMENTS] = currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].content;

	[unroll(NUMBER_OF_ELEMENTS)]
	for (uint i = NUMBER_OF_ELEMENTS - 1; i >= 0; --i)
	{
		mean = (content1[i] + content2[i]) / 2.0;

		difference = (mean - content1[i]) * Viscosities[i];

		difference *= (abs(difference) > 0.01);

		difference -= ((volume.x + content1[i] + difference) > 1) * (volume.x + content1[i] + difference - 1);

		difference += ((volume.y + content2[i] - difference) > 1) * (volume.y + content2[i] - difference - 1);

		if (difference > 0)
		{
			float sumWeightedTemps = temperature.x * currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].volume + currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].temperature * difference;
			temperature.x = sumWeightedTemps / (currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].volume + difference);
		}
		else if (difference < 0)
		{
			float sumWeightedTemps = temperature.y * volume.y - temperature.x * difference;
			temperature.y = sumWeightedTemps / (volume.y - difference);
		}
		else if(abs(difference) < 0.01)
		{
			float diff = (temperature.x - temperature.y) / temperatureSpread;
			temperature += float2(-(diff / (volume.x + 1)), diff / (volume.y + 1));
		}

		content1[i] += difference;
		content2[i] -= difference;

		volume += float2(content1[i], content2[i]);
	}

	newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].volume = volume.x;
	newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].volume = volume.y;

	newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].temperature = temperature.x;
	newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].temperature = temperature.y;

	newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].content = content1;
	newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].content = content2;

	if (id.x == heat.x && id.y == heat.y && id.z * 2 + offset.z == heat.z)
	{
		newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].temperature = heat.w;
	}
}

