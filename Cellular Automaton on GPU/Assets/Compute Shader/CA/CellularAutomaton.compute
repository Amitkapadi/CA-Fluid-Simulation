#pragma kernel Initialize
#pragma kernel UpdateX
#pragma kernel UpdateY
#pragma kernel UpdateZ

#define MIN_TEMPERATURE -275
#define MAX_TEMPERATURE 1000000

#define NUMBER_OF_ELEMENTS 3
#define ADDRESS(x,y,z,size) x + y * size + z * size * size

struct Cell
{
	int volume;
	int content[NUMBER_OF_ELEMENTS];
	float temperature;
};

static int Viscosities[] =
{
	-1, 2, 0
};

static float Densities[] =
{
	0.4, 1, 2
};

static float2 AggregationChangeTemperatures[] =
{
	float2(MAX_TEMPERATURE, 10),
	float2(MAX_TEMPERATURE, MIN_TEMPERATURE),
	float2(100, MIN_TEMPERATURE)
};

static int2 AggregationChangeElements[] =
{
	int2(-1, 2),
	int2(-1, -1),
	int2(0, -1)
};


StructuredBuffer<Cell> currentGeneration;
RWStructuredBuffer<Cell> newGeneration;

uint size;
int maxVolume;
int3 offset;

int4 fill;

[numthreads(8, 8, 8)]
void Initialize(uint3 id : SV_DispatchThreadID)
{
	for (int i = 0; i < NUMBER_OF_ELEMENTS; ++i)
	{
		newGeneration[ADDRESS(id.x, id.y, id.z, size)].content[i] = 0;
	}

	newGeneration[ADDRESS(id.x, id.y, id.z, size)].volume = 0;
	newGeneration[ADDRESS(id.x, id.y, id.z, size)].temperature = 20;

	//if (id.x == 8 && id.y == 8 && id.z == 8)
	//{
	//	newGeneration[ADDRESS(id.x, id.y, id.z, size)].volume = 8;
	//}

	if (id.x == 0 || id.y == 0 || id.z == 0 || id.x == size - 1 || id.y == size - 1 || id.z == size - 1)
	{
		newGeneration[ADDRESS(id.x, id.y, id.z, size)].volume = -1;
	}
}

[numthreads(4, 8, 8)]
void UpdateX(uint3 id : SV_DispatchThreadID)
{
	if (currentGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].volume == -1 || currentGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].volume == -1)
	{
		return;
	}

	newGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].volume = 0;
	newGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].volume = 0;

	int mean, difference, amount;

	[unroll(NUMBER_OF_ELEMENTS)]
	for (int i = NUMBER_OF_ELEMENTS - 1; i >= 0; --i)
	{
		mean = uint(currentGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].content[i] + currentGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].content[i]) / 2;

		difference = mean - currentGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].content[i];

		difference *= (1 - (mean == currentGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].content[i] || mean == currentGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].content[i]));

		amount = sign(difference) * max(abs(difference) - Viscosities[i], 0);

		if ((newGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].volume + currentGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].content[i] + amount) > maxVolume)
		{
			amount -= (newGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].volume + currentGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].content[i] + amount - maxVolume);
		}

		if ((newGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].volume + currentGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].content[i] - amount) > maxVolume)
		{
			amount += (newGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].volume + currentGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].content[i] - amount - maxVolume);
		}

		if (amount > 0)
		{
			float sumWeightedTemps = newGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].temperature * currentGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].volume + currentGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].temperature * amount;
			newGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].temperature = sumWeightedTemps / (float)(currentGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].volume + amount);
		}
		if (amount < 0)
		{
			float sumWeightedTemps = newGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].temperature * newGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].volume - newGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].temperature * amount;
			newGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].temperature = sumWeightedTemps / (float)(newGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].volume - amount);
		}

		newGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].content[i] = currentGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].content[i] + amount;
		newGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].volume += currentGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].content[i] + amount;

		newGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].content[i] = currentGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].content[i] - amount;
		newGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].volume += currentGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].content[i] - amount;
	}

	if (id.x * 2 + offset.x == fill.x && id.y == fill.y && id.z == fill.z)
	{
		newGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].content[fill.w] += 1;
		newGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].volume += 1;
	}
}

[numthreads(8, 4, 8)]
void UpdateY(uint3 id : SV_DispatchThreadID)
{
	newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)] = currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)];
	newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)] = currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)];

	if (newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].volume == -1 || newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].volume == -1)
	{
		return;
	}

	int amount, bottom, volume, difference;

	volume = 0;

	[unroll(NUMBER_OF_ELEMENTS)]
	for (int i = NUMBER_OF_ELEMENTS - 1; i >= 0; --i)
	{
		amount = (currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].content[i] + currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].content[i]);
		bottom = (int)min(maxVolume - volume, min(Densities[i], 1) * amount);

		difference = bottom - newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].content[i];

		if (difference > 0)
		{
			float sumWeightedTemps = newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].temperature * currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].volume + currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].temperature * difference;
			newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].temperature = sumWeightedTemps / (float)(currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].volume + difference);
		}

		newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].content[i] += difference;
		newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].volume += difference;

		volume += bottom;

		difference = amount - bottom - newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].content[i];

		if (difference > 0)
		{
			float sumWeightedTemps = newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].temperature * currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].volume + currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].temperature * difference;
			newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].temperature = sumWeightedTemps / (float)(currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].volume + difference);
		}

		newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].content[i] += difference;
		newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].volume += difference;
	}

	[unroll(NUMBER_OF_ELEMENTS)]
	for (int i = NUMBER_OF_ELEMENTS - 1; i >= 0; --i)
	{
		if (newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].content[i] > 0)
		{
			if (currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].temperature >= AggregationChangeTemperatures[i].x)
			{
				newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].temperature -= 2;
				--newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].content[i];
				++newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].content[AggregationChangeElements[i].x];
			}
			if (currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].temperature < AggregationChangeTemperatures[i].y)
			{
				newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].temperature += 2;
				--newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].content[i];
				++newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].content[AggregationChangeElements[i].y];
			}
		}
	}

	if (id.x == fill.x && id.y * 2 + offset.y == fill.y && id.z == fill.z)
	{
		newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].content[fill.w] += 1;
		newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].volume += 1;
	}
}

[numthreads(8, 8, 4)]
void UpdateZ(uint3 id : SV_DispatchThreadID)
{
	if (currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].volume == -1 || currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].volume == -1)
	{
		return;
	}

	newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].volume = 0;
	newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].volume = 0;

	int mean, difference, amount;

	[unroll(NUMBER_OF_ELEMENTS)]
	for (int i = NUMBER_OF_ELEMENTS - 1; i >= 0; --i)
	{
		mean = uint(currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].content[i] + currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].content[i]) / 2;

		difference = mean - currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].content[i];

		difference *= (1 - (mean == currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].content[i] || mean == currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].content[i]));

		amount = sign(difference) * max(abs(difference) - Viscosities[i], 0);

		if ((newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].volume + currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].content[i] + amount) > maxVolume)
		{
			amount -= (newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].volume + currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].content[i] + amount - maxVolume);
		}

		if ((newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].volume + currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].content[i] - amount) > maxVolume)
		{
			amount += (newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].volume + currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].content[i] - amount - maxVolume);
		}

		if (amount > 0)
		{
			float sumWeightedTemps = newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].temperature * currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].volume + currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].temperature * amount;
			newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].temperature = sumWeightedTemps / (float)(currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].volume + amount);
		}
		if (amount < 0)
		{
			float sumWeightedTemps = newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].temperature * newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].volume - newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].temperature * amount;
			newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].temperature = sumWeightedTemps / (float)(newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].volume - amount);
		}

		newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].content[i] = currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].content[i] + amount;
		newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].volume += currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].content[i] + amount;

		newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].content[i] = currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].content[i] - amount;
		newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].volume += currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].content[i] - amount;
	}

	if (id.x == fill.x && id.y == fill.y && id.z * 2 + offset.z == fill.z)
	{
		newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].content[fill.w] += 1;
		newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].volume += 1;
	}
}

