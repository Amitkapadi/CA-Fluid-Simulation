#pragma kernel Initialize
#pragma kernel UpdateX
#pragma kernel UpdateY
#pragma kernel UpdateZ

#define MIN_TEMPERATURE -275
#define MAX_TEMPERATURE 1000000

#define NUMBER_OF_ELEMENTS 3
#define ADDRESS(x,y,z,size) x + y * size + z * size * size

struct Cell
{
	float content[NUMBER_OF_ELEMENTS];
	float volume;
	float temperature;
};

static float Viscosities[] =
{
	0, 0.1, 0.9
};

static float Densities[] =
{
	0.4, 1, 2
};

static float2 AggregationChangeTemperatures[] =
{
	float2(MAX_TEMPERATURE, 10),
	float2(MAX_TEMPERATURE, MIN_TEMPERATURE),
	float2(100, MIN_TEMPERATURE)
};

static int2 AggregationChangeElements[] =
{
	int2(-1, 2),
	int2(-1, -1),
	int2(0, -1)
};

static float temperatureSpread = 32;

StructuredBuffer<Cell> currentGeneration;
RWStructuredBuffer<Cell> newGeneration;

uint size;
uint3 offset;

uint4 fill;
uint4 heat;

[numthreads(16, 8, 8)]
void Initialize(uint3 id : SV_DispatchThreadID)
{
	newGeneration[ADDRESS(id.x, id.y, id.z, size)].temperature = 20;
	newGeneration[ADDRESS(id.x, id.y, id.z, size)].volume = -(id.x == 0 || id.y == 0 || id.z == 0 || id.x == size - 1 || id.y == size - 1 || id.z == size - 1 || (id.z == 20 && id.y < 3));

	for (uint i = 0; i < NUMBER_OF_ELEMENTS; ++i)
	{
		newGeneration[ADDRESS(id.x, id.y, id.z, size)].content[i] = 0.0;
	}
}

[numthreads(8, 16, 8)]
void UpdateX(uint3 id : SV_DispatchThreadID)
{
	newGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)] = currentGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)];
	newGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)] = currentGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)];

	if (currentGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].volume < 0 ||
		currentGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].volume < 0 ||
		(abs(currentGeneration[ADDRESS((id.x * 2 + offset.x), (id.y - 1), id.z, size)].volume) < 0.5 &&
		abs(currentGeneration[ADDRESS((id.x * 2 + offset.x + 1), (id.y - 1), id.z, size)].volume) < 0.5))
	{
		return;
	}

	float mean, difference, 
		volume = 0, volume2 = 0,
		temperature = currentGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].temperature, 
		temperature2 = currentGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].temperature;

	[unroll(NUMBER_OF_ELEMENTS)]
	for (uint i = NUMBER_OF_ELEMENTS - 1; i >= 0; --i)
	{
		mean = (currentGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].content[i] + currentGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].content[i]) / 2.0;

		difference = (mean - currentGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].content[i]) * Viscosities[i];

		difference *= (abs(difference) > 0.01);

		difference -= ((volume + currentGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].content[i] + difference) > 1) * (volume + currentGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].content[i] + difference - 1);

		difference += ((volume2 + currentGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].content[i] - difference) > 1) * (volume2 + currentGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].content[i] - difference - 1);

		if (difference > 0)
		{
			float sumWeightedTemps = temperature * currentGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].volume + currentGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].temperature * difference;
			temperature = sumWeightedTemps / (currentGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].volume + difference);
		}
		else if (difference < 0)
		{
			float sumWeightedTemps = temperature2 * volume - temperature * difference;
			temperature2 = sumWeightedTemps / (volume2 - difference);
		}
		else if (abs(difference) < 0.001)
		{
			float diff = (temperature - temperature2) / temperatureSpread;
			temperature -= diff / (volume + 1);
			temperature2 += diff / (volume2 + 1); 
		}

		newGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].content[i] = currentGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].content[i] + difference;
		volume += currentGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].content[i] + difference;

		newGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].content[i] = currentGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].content[i] - difference;
		volume2 += currentGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].content[i] - difference;
	}

	newGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].volume = volume;
	newGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].volume = volume2;

	newGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].temperature = temperature;
	newGeneration[ADDRESS((id.x * 2 + offset.x + 1), id.y, id.z, size)].temperature = temperature2;

	if (id.x * 2 + offset.x == heat.x && id.y == heat.y && id.z == heat.z)
	{
		newGeneration[ADDRESS((id.x * 2 + offset.x), id.y, id.z, size)].temperature = heat.w;
	}
}

[numthreads(16, 8, 8)]
void UpdateY(uint3 id : SV_DispatchThreadID)
{
	newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)] = currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)];
	newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)] = currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)];

	if (currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].volume < 0 ||
		currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].volume < 0)
	{
		return;
	}

	float amount, bottom, difference,
		volume = 0,
		volume1 = currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].volume,
		volume2 = currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].volume,
		temperature = currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].temperature,
		temperature2 = currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].temperature;

	[unroll(NUMBER_OF_ELEMENTS)]
	for (uint i = NUMBER_OF_ELEMENTS - 1; i >= 0; --i)
	{
		amount = (currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].content[i] + currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].content[i]);
		bottom = min(1.0 - volume, min(Densities[i], 1.0) * amount);

		difference = bottom - currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].content[i];

		if (amount < 0.01)
		{
			difference = 0.00;
			bottom = 0.00;
			amount = 0.00;
		}

		if (difference > 0)
		{
			float sumWeightedTemps = temperature * currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].volume + currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].temperature * difference;
			temperature = sumWeightedTemps / (currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].volume + difference);
		}

		newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].content[i] += difference;
		volume1 += difference;

		volume += bottom;

		difference = amount - bottom - currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].content[i];

		if (difference < 0)
		{
			float sumWeightedTemps = temperature2 * currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].volume + currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].temperature * difference;
			temperature2 = sumWeightedTemps / (currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].volume + difference);
		}

		newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].content[i] += difference;
		volume2 += difference;

		float tempDifference = (temperature2 - temperature) / temperatureSpread;
		temperature += tempDifference / (volume + 1);
		temperature2 -= tempDifference / (volume2 + 1);
	}

	newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].volume = volume1;
	newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].volume = volume2;

	newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].temperature = temperature;
	newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].temperature = temperature2;

	[unroll(NUMBER_OF_ELEMENTS)]
	for (i = NUMBER_OF_ELEMENTS - 1; i >= 0; --i)
	{
		if (newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].content[i] > 0.2)
		{
			if (currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].temperature >= AggregationChangeTemperatures[i].x)
			{
				newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].temperature -= 2;
				newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].content[i] -= 0.2;
				newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].content[AggregationChangeElements[i].x] += 0.2;
			}
			if (currentGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].temperature < AggregationChangeTemperatures[i].y)
			{
				newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].temperature += 2;
				newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].content[i] -= 0.2;
				newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].content[AggregationChangeElements[i].y] += 0.2;
			}
		}
	}

	if (id.x == fill.x && id.y * 2 + offset.y == fill.y && id.z == fill.z && newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].volume < 0.8)
	{
		newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].content[fill.w] += 0.2;
		newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].volume += 0.2;
	}

	if (id.x == fill.x && id.y * 2 + offset.y + 1 == fill.y && id.z == fill.z && newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].volume < 0.8)
	{
		newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].content[fill.w] += 0.2;
		newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y + 1), id.z, size)].volume += 0.2;
	}

	if (id.x == heat.x && id.y * 2 + offset.y == heat.y && id.z == heat.z)
	{
		newGeneration[ADDRESS(id.x, (id.y * 2 + offset.y), id.z, size)].temperature = heat.w;
	}
}

[numthreads(16, 16, 4)]
void UpdateZ(uint3 id : SV_DispatchThreadID)
{
	newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)] = currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)];
	newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)] = currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)];

	if (currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].volume < 0 ||
		currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].volume < 0 ||
		(abs(currentGeneration[ADDRESS(id.x, (id.y - 1), (id.z * 2 + offset.z), size)].volume) < 0.5 &&
		abs(currentGeneration[ADDRESS(id.x, (id.y - 1), (id.z * 2 + offset.z + 1), size)].volume) < 0.5))
	{
		return;
	}

	float mean, difference, 
		volume = 0, volume2 = 0, 
		temperature = currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].temperature, 
		temperature2 = currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].temperature;

	[unroll(NUMBER_OF_ELEMENTS)]
	for (uint i = NUMBER_OF_ELEMENTS - 1; i >= 0; --i)
	{
		mean = (currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].content[i] + currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].content[i]) / 2.0;

		difference = (mean - currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].content[i]) * Viscosities[i];

		difference *= (abs(difference) > 0.01);

		difference -= ((volume + currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].content[i] + difference) > 1) * (volume + currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].content[i] + difference - 1);

		difference += ((volume2 + currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].content[i] - difference) > 1) * (volume2 + currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].content[i] - difference - 1);

		if (difference > 0)
		{
			float sumWeightedTemps = temperature * currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].volume + currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].temperature * difference;
			temperature = sumWeightedTemps / (currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].volume + difference);
		}
		else if (difference < 0)
		{
			float sumWeightedTemps = temperature2 * volume2 - temperature * difference;
			temperature2 = sumWeightedTemps / (volume2 - difference);
		}
		else if(abs(difference) < 0.01)
		{
			float diff = (temperature - temperature2) / temperatureSpread;
			temperature -= diff / (volume + 1);
			temperature2 += diff / (volume2 + 1);
		}

		newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].content[i] = currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].content[i] + difference;
		volume += currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].content[i] + difference;

		newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].content[i] = currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].content[i] - difference;
		volume2 += currentGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].content[i] - difference;
	}

	newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].volume = volume;
	newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].volume = volume2;

	newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].temperature = temperature;
	newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z + 1), size)].temperature = temperature2;

	if (id.x == heat.x && id.y == heat.y && id.z * 2 + offset.z == heat.z)
	{
		newGeneration[ADDRESS(id.x, id.y, (id.z * 2 + offset.z), size)].temperature = heat.w;
	}
}

