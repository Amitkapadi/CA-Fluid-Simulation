#pragma kernel CSMain

#define NUMBER_OF_ELEMENTS 3
#define ADDRESS(x,y,z,size) x + y * size + z * size * size

static float4 Colors[] =
{
	float4(0,1,1,1),
	float4(1,1,0,1),
	float4(0.2,0.5,1,1)
};

struct Cell
{
	float content[NUMBER_OF_ELEMENTS];
	float volume;
	int temperature;
};

StructuredBuffer<Cell> currentGeneration;
RWTexture3D<float4> Result;

uint size;

[numthreads(16,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	Cell cell = currentGeneration[ADDRESS(id.x, id.y, id.z, size)];

	float4 color = float4(1, 1, 1, 0.1);

	if (cell.volume <= 0)
	{
		color = float4(0, 0, 0, 1);
	}
	else if (cell.volume > 1)
	{
		color = float4(0, 0, 0, 1);
	}
	else
	{
		int pos = 0;
		[unroll(NUMBER_OF_ELEMENTS)]
		for (int i = 0; i < NUMBER_OF_ELEMENTS; ++i)
		{
			if (cell.content[i] >= cell.content[pos])
			{
				pos = i;
			}
		}
		color = Colors[pos];
	}

	Result[id] = color;
}
