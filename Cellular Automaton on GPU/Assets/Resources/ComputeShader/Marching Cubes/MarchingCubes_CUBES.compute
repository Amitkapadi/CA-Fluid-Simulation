#pragma kernel CSMain

#define NUMBER_OF_ELEMENTS 3
#define ADDRESS(x,y,z,size) x + y * size[0] + z * size[0] * size[1]

struct Cell
{
	half content[NUMBER_OF_ELEMENTS];
	half volume;
	half temperature;
};

struct Quad
{
	half3 vertex[4];
};

uint3 size;

StructuredBuffer<Cell> currentGeneration;
AppendStructuredBuffer<Quad> mesh;

[numthreads(16, 8, 8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	Cell current = currentGeneration[ADDRESS(id.x, id.y, id.z, size)];
	Cell down = currentGeneration[ADDRESS(id.x, (id.y - 1), id.z, size)];
	Cell up = currentGeneration[ADDRESS(id.x, (id.y + 1), id.z, size)];
	Cell left = currentGeneration[ADDRESS((id.x - 1), id.y, id.z, size)];
	Cell right = currentGeneration[ADDRESS((id.x + 1), id.y, id.z, size)];
	Cell front = currentGeneration[ADDRESS(id.x, id.y, (id.z - 1), size)];
	Cell back = currentGeneration[ADDRESS(id.x, id.y, (id.z + 1), size)];

	half3 _scale = half3(1.0 / size.x, 1.0 / size.y, 1.0 / size.z);

	if (down.volume > 0 && (down.volume > current.volume || down.volume < 1) && id.y > 0)
	{
		Quad quad;
		quad.vertex[0] = half3(id.x * _scale.x,			id.y * _scale.y - _scale.y + down.volume * _scale.y, id.z * _scale.z);
		quad.vertex[1] = half3(id.x * _scale.x + _scale.x,	id.y * _scale.y - _scale.y + down.volume * _scale.y, id.z * _scale.z);
		quad.vertex[2] = half3(id.x * _scale.x + _scale.x,	id.y * _scale.y - _scale.y + down.volume * _scale.y, id.z * _scale.z + _scale.z);
		quad.vertex[3] = half3(id.x * _scale.x,			id.y * _scale.y - _scale.y + down.volume * _scale.y, id.z * _scale.z + _scale.z);
		mesh.Append(quad);
	}

	if (up.volume > 0 && (up.volume > current.volume || current.volume < 1) && id.y < size.y - 1)
	{
		Quad quad;
		quad.vertex[3] = half3(id.x * _scale.x,			id.y * _scale.y + _scale.y, id.z * _scale.z);
		quad.vertex[2] = half3(id.x * _scale.x + _scale.x,	id.y * _scale.y + _scale.y, id.z * _scale.z);
		quad.vertex[1] = half3(id.x * _scale.x + _scale.x,	id.y * _scale.y + _scale.y, id.z * _scale.z + _scale.z);
		quad.vertex[0] = half3(id.x * _scale.x,			id.y * _scale.y + _scale.y, id.z * _scale.z + _scale.z);
		mesh.Append(quad);
	}
	
	if (left.volume > 0 && left.volume > current.volume && id.x > 0)
	{
		Quad quad;
		quad.vertex[0] = half3(id.x * _scale.x, id.y * _scale.y,							id.z * _scale.z);
		quad.vertex[1] = half3(id.x * _scale.x, id.y * _scale.y,							id.z * _scale.z + _scale.z);
		quad.vertex[2] = half3(id.x * _scale.x, id.y * _scale.y + clamp(left.volume, 0, 1) * _scale.y,	id.z * _scale.z + _scale.z);
		quad.vertex[3] = half3(id.x * _scale.x, id.y * _scale.y + clamp(left.volume, 0, 1) * _scale.y,	id.z * _scale.z);
		mesh.Append(quad);
	}
	
	if (right.volume > 0 && right.volume > current.volume && id.x < size.x - 1)
	{
		Quad quad;
		quad.vertex[3] = half3(id.x * _scale.x + _scale.x, id.y * _scale.y,							id.z * _scale.z);
		quad.vertex[2] = half3(id.x * _scale.x + _scale.x, id.y * _scale.y,							id.z * _scale.z + _scale.z);
		quad.vertex[1] = half3(id.x * _scale.x + _scale.x, id.y * _scale.y + clamp(right.volume, 0, 1) * _scale.y,	id.z * _scale.z + _scale.z);
		quad.vertex[0] = half3(id.x * _scale.x + _scale.x, id.y * _scale.y + clamp(right.volume, 0, 1) * _scale.y,	id.z * _scale.z);
		mesh.Append(quad);
	}

	if (front.volume > 0 && front.volume > current.volume && id.z > 0)
	{
		Quad quad;
		quad.vertex[3] = half3(id.x * _scale.x,			id.y * _scale.y,							id.z * _scale.z);
		quad.vertex[2] = half3(id.x * _scale.x + _scale.x,	id.y * _scale.y,							id.z * _scale.z);
		quad.vertex[1] = half3(id.x * _scale.x + _scale.x,	id.y * _scale.y + clamp(front.volume, 0, 1) * _scale.y,	id.z * _scale.z);
		quad.vertex[0] = half3(id.x * _scale.x,			id.y * _scale.y + clamp(front.volume, 0, 1) * _scale.y,	id.z * _scale.z);
		mesh.Append(quad);
	}

	if (back.volume > 0 && back.volume > current.volume && id.z < size.z - 1)
	{
		Quad quad;
		quad.vertex[0] = half3(id.x * _scale.x,			id.y * _scale.y,							id.z * _scale.z + _scale.z);
		quad.vertex[1] = half3(id.x * _scale.x + _scale.x,	id.y * _scale.y,							id.z * _scale.z + _scale.z);
		quad.vertex[2] = half3(id.x * _scale.x + _scale.x,	id.y * _scale.y + clamp(back.volume, 0, 1) * _scale.y,	id.z * _scale.z + _scale.z);
		quad.vertex[3] = half3(id.x * _scale.x,			id.y * _scale.y + clamp(back.volume, 0, 1) * _scale.y,	id.z * _scale.z + _scale.z);
		mesh.Append(quad);
	}
}
