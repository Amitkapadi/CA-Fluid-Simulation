#pragma kernel CSMain

#define NUMBER_OF_ELEMENTS 3
#define ADDRESS(x,y,z,size) x + y * size[0] + z * size[0] * size[1]

struct Cell
{
	half content[NUMBER_OF_ELEMENTS];
	half volume;
	half temperature;
};

struct Quad
{
	half3 vertex[4];
};

uint3 size;

StructuredBuffer<Cell> currentGeneration;
AppendStructuredBuffer<Quad> mesh;

half Volume(Cell cell)
{
	half volume = 0;

	[unroll(NUMBER_OF_ELEMENTS)]
	for (uint index = 1; index < NUMBER_OF_ELEMENTS; ++index)
	{
		volume += cell.content[index];
	}

	return saturate(volume);
}

[numthreads(16, 8, 8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	half current = Volume(currentGeneration[ADDRESS(id.x, id.y, id.z, size)]);
	half down = Volume(currentGeneration[ADDRESS(id.x, (id.y - 1), id.z, size)]);
	half up = Volume(currentGeneration[ADDRESS(id.x, (id.y + 1), id.z, size)]);
	half left = Volume(currentGeneration[ADDRESS((id.x - 1), id.y, id.z, size)]);
	half right = Volume(currentGeneration[ADDRESS((id.x + 1), id.y, id.z, size)]);
	half front = Volume(currentGeneration[ADDRESS(id.x, id.y, (id.z - 1), size)]);
	half back = Volume(currentGeneration[ADDRESS(id.x, id.y, (id.z + 1), size)]);

	half3 _scale = half3(1.0 / size.x, 1.0 / size.y, 1.0 / size.z);

	if (down > 0 && (down > current || down < 1) && id.y > 0)
	{
		Quad quad;
		quad.vertex[0] = half3(id.x * _scale.x,				id.y * _scale.y - _scale.y + (down) * _scale.y, id.z * _scale.z);
		quad.vertex[1] = half3(id.x * _scale.x + _scale.x,	id.y * _scale.y - _scale.y + (down) * _scale.y, id.z * _scale.z);
		quad.vertex[2] = half3(id.x * _scale.x + _scale.x,	id.y * _scale.y - _scale.y + (down) * _scale.y, id.z * _scale.z + _scale.z);
		quad.vertex[3] = half3(id.x * _scale.x,				id.y * _scale.y - _scale.y + (down) * _scale.y, id.z * _scale.z + _scale.z);
		mesh.Append(quad);
	}

	if (up > 0 && (up > current || current < 1) && id.y < size.y - 1)
	{
		Quad quad;
		quad.vertex[3] = half3(id.x * _scale.x,				id.y * _scale.y + _scale.y, id.z * _scale.z);
		quad.vertex[2] = half3(id.x * _scale.x + _scale.x,	id.y * _scale.y + _scale.y, id.z * _scale.z);
		quad.vertex[1] = half3(id.x * _scale.x + _scale.x,	id.y * _scale.y + _scale.y, id.z * _scale.z + _scale.z);
		quad.vertex[0] = half3(id.x * _scale.x,				id.y * _scale.y + _scale.y, id.z * _scale.z + _scale.z);
		mesh.Append(quad);
	}
	
	if (left > 0 && left > current && id.x > 0)
	{
		Quad quad;
		quad.vertex[0] = half3(id.x * _scale.x, id.y * _scale.y,						id.z * _scale.z);
		quad.vertex[1] = half3(id.x * _scale.x, id.y * _scale.y,						id.z * _scale.z + _scale.z);
		quad.vertex[2] = half3(id.x * _scale.x, id.y * _scale.y + (left) * _scale.y,	id.z * _scale.z + _scale.z);
		quad.vertex[3] = half3(id.x * _scale.x, id.y * _scale.y + (left) * _scale.y,	id.z * _scale.z);
		mesh.Append(quad);
	}
	
	if (right > 0 && right > current && id.x < size.x - 1)
	{
		Quad quad;
		quad.vertex[3] = half3(id.x * _scale.x + _scale.x, id.y * _scale.y,							id.z * _scale.z);
		quad.vertex[2] = half3(id.x * _scale.x + _scale.x, id.y * _scale.y,							id.z * _scale.z + _scale.z);
		quad.vertex[1] = half3(id.x * _scale.x + _scale.x, id.y * _scale.y + (right) * _scale.y,	id.z * _scale.z + _scale.z);
		quad.vertex[0] = half3(id.x * _scale.x + _scale.x, id.y * _scale.y + (right) * _scale.y,	id.z * _scale.z);
		mesh.Append(quad);
	}

	if (front > 0 && front > current && id.z > 0)
	{
		Quad quad;
		quad.vertex[3] = half3(id.x * _scale.x,				id.y * _scale.y,						id.z * _scale.z);
		quad.vertex[2] = half3(id.x * _scale.x + _scale.x,	id.y * _scale.y,						id.z * _scale.z);
		quad.vertex[1] = half3(id.x * _scale.x + _scale.x,	id.y * _scale.y + (front) * _scale.y,	id.z * _scale.z);
		quad.vertex[0] = half3(id.x * _scale.x,				id.y * _scale.y + (front) * _scale.y,	id.z * _scale.z);
		mesh.Append(quad);
	}

	if (back > 0 && back > current && id.z < size.z - 1)
	{
		Quad quad;
		quad.vertex[0] = half3(id.x * _scale.x,				id.y * _scale.y,								id.z * _scale.z + _scale.z);
		quad.vertex[1] = half3(id.x * _scale.x + _scale.x,	id.y * _scale.y,								id.z * _scale.z + _scale.z);
		quad.vertex[2] = half3(id.x * _scale.x + _scale.x,	id.y * _scale.y + saturate(back) * _scale.y,	id.z * _scale.z + _scale.z);
		quad.vertex[3] = half3(id.x * _scale.x,				id.y * _scale.y + saturate(back) * _scale.y,	id.z * _scale.z + _scale.z);
		mesh.Append(quad);
	}
}
