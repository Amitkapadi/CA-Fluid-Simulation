#pragma kernel Blur
#pragma kernel CA2Mesh

#define PI 3.14159265358979323846
#define EULER 2.71828182845904523536
#define DIMENSIONS 2
#define NUMBER_OF_ELEMENTS 3
#define ADDRESS(x,y,z,size) x + y * size[0] + z * size[0] * size[1]

struct Cell
{
	half content[NUMBER_OF_ELEMENTS];
	half volume;
	half temperature;
};

Texture2D<float> DepthTex;
RWTexture2D<float> BlurTex;

StructuredBuffer<Cell> currentGeneration;
AppendStructuredBuffer<half4> mesh;

uint3 size;

[numthreads(16, 8, 8)]
void CA2Mesh (uint3 id : SV_DispatchThreadID)
{
	if (currentGeneration[ADDRESS(id.x, id.y, id.z, size)].volume > 0.4)
	{
		mesh.Append(half4(id.x / half(size.x), id.y / half(size.y), id.z / half(size.z), currentGeneration[ADDRESS(id.x, id.y, id.z, size)].volume));
	}
}


[numthreads(32, 32, 1)]
void Blur(uint3 id : SV_DispatchThreadID)
{
	//float depth = DepthTex[id.xy].y;

	//float blurScale = 0.1;
	//float blurDepthFalloff = 0.2;

	//float sum = 0;
	//float wsum = 0;
	//for (int x = -50; x <= 50; ++x) 
	//{
	//	float samp = DepthTex[id.xy + int2(x, 0)].y;

	//	float r = float(x) * blurScale;
	//	float w = exp(-r*r);

	//	float r2 = (samp - depth) * blurDepthFalloff;
	//	float g = exp(-r2*r2);
	//	sum += samp * w * g;
	//	wsum += w * g;
	//}

	//if (wsum > 0.0) {
	//	sum /= wsum;
	//}

	//float sigma = 5;
	//float sigmaC = 2 * sigma * sigma;
	//float constant = 1.0 / (3.1415296 * sigmaC);

	//float sum = 0;

	//for (int x = -10; x <= 10; ++x)
	//{
	//	for (int y = -10; y <= 10; ++y)
	//	{
	//		sum += pow(2.71828, -((x * x + y * y) / sigmaC)) * DepthTex[id.xy + int2(x, y)].y;
	//	}
	//}

	BlurTex[id.xy] = DepthTex[id.xy];
}
