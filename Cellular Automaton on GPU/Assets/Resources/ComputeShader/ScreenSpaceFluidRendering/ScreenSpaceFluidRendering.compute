#pragma kernel Blur
#pragma kernel CA2Mesh
#pragma kernel HorizontalBlur

#define PI 3.14159265358979323846
#define EULER 2.71828182845904523536
#define DIMENSIONS 2
#define NUMBER_OF_ELEMENTS 3
#define ADDRESS(x,y,z,size) x + y * size[0] + z * size[0] * size[1]

struct Cell
{
	half content[NUMBER_OF_ELEMENTS];
	half volume;
	half temperature;
};

Texture2D<float> DepthTex;
RWTexture2D<float> BlurTex;

StructuredBuffer<Cell> currentGeneration;
AppendStructuredBuffer<half4> mesh;

uint3 size;

[numthreads(16, 8, 8)]
void CA2Mesh (uint3 id : SV_DispatchThreadID)
{
	if (currentGeneration[ADDRESS(id.x, id.y, id.z, size)].volume > 0.4)
	{
		mesh.Append(half4(id.x / half(size.x), id.y / half(size.y), id.z / half(size.z), currentGeneration[ADDRESS(id.x, id.y, id.z, size)].volume));
	}
}

[numthreads(32, 32, 1)]
void Blur(uint3 id : SV_DispatchThreadID)
{
	float depth = DepthTex[id.xy];

	float blurScale = 0.01;
	float blurDepthFalloff = 2;

	float sum = 0;
	float wsum = 0;
	for (int x = -25; x <= 25; ++x) 
	{
		float samp = DepthTex[id.xy + int2(x, 0)];

		float r = float(x) * blurScale;
		float w = exp(-r*r);

		float r2 = (samp - depth) * blurDepthFalloff;
		float g = exp(-r2*r2);
		sum += samp * w * g;
		wsum += w * g;
	}

	if (wsum > 0.0) {
		sum /= wsum;
	}

	if (sum > 0.5)
	{
		sum = 1;
	}

	BlurTex[id.xy] = sum;
}


const static float gauss[] = { 1.0 / 512.0, 2.0 / 512.0, 4.0 / 512.0, 8.0 / 512.0, 16.0 / 512.0, 32.0 / 512.0, 64.0 / 512.0, 128.0 / 512.0, 
							   256.0 / 512.0, 
							   128.0 / 512.0, 64.0 / 512.0, 32.0 / 512.0, 16.0 / 512.0, 8.0 / 512.0, 4.0 / 512.0, 2.0 / 512.0, 1.0 / 512.0, };

[numthreads(4, 256, 1)]
void HorizontalBlur(uint3 id : SV_DispatchThreadID)
{
	float values[128];

	for (uint i = 0; i < 128; ++i)
	{
		values[i] = DepthTex[uint2(i + id.x * 128, id.y)];
	}

	float value = 0;

	for (i = 8; i < 120; ++i)
	{
		for (int x = -8; x <= 8; ++x)
		{
			value += (gauss[x + 8] * values[i + x]);
		}
		BlurTex[uint2(i + id.x * 128, id.y)] = value;
		value = 0;
	}
}